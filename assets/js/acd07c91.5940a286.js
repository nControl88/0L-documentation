"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,h=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={},i="Easy Mode",l={unversionedId:"node-ops/validator/onboarding/validator_onboarding_easy_mode",id:"node-ops/validator/onboarding/validator_onboarding_easy_mode",title:"Easy Mode",description:"Easy Mode",source:"@site/docs/node-ops/validator/onboarding/validator_onboarding_easy_mode.md",sourceDirName:"node-ops/validator/onboarding",slug:"/node-ops/validator/onboarding/validator_onboarding_easy_mode",permalink:"/0L-documentation/docs/node-ops/validator/onboarding/validator_onboarding_easy_mode",draft:!1,editUrl:"https://github.com/nControl88/0l-documentation-source/tree/main/docs/node-ops/validator/onboarding/validator_onboarding_easy_mode.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Onboarding",permalink:"/0L-documentation/docs/node-ops/validator/onboarding/"},next:{title:"Hard Mode",permalink:"/0L-documentation/docs/node-ops/validator/onboarding/validator_onboarding_hard_mode"}},d={},s=[{value:"Easy Mode",id:"easy-mode-1",level:2},{value:"Things you will need:",id:"things-you-will-need",level:3},{value:"Make new keys, and address:",id:"make-new-keys-and-address",level:4},{value:"STOP. WRITE THIS INFO DOWN <em>ON PEN AND PAPER</em>. NOW.",id:"stop-write-this-info-down-on-pen-and-paper-now",level:2},{value:"Check the web monitor",id:"check-the-web-monitor",level:4},{value:"Troubleshooting: If no page loads here, you may not have port <code>3030</code> open to the public.",id:"troubleshooting-if-no-page-loads-here-you-may-not-have-port-3030-open-to-the-public",level:5}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"easy-mode"},"Easy Mode"),(0,a.kt)("h2",{id:"easy-mode-1"},"Easy Mode"),(0,a.kt)("p",null,"There are a lot of things to configure to set up an 0L validator. Easy Mode makes assumptions."),(0,a.kt)("p",null,"You can optionally do ",(0,a.kt)("a",{parentName:"p",href:"/0L-documentation/docs/node-ops/validator/onboarding/validator_onboarding_hard_mode"},"Hard Mode"),", and build from source, and write your own config files."),(0,a.kt)("h3",{id:"things-you-will-need"},"Things you will need:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A cloud virtual machine running Linux Ubuntu 20.4, with 16GB Ram, and 4 Cores.")),(0,a.kt)("p",null,"Settings for the host:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You need to set a ",(0,a.kt)("em",{parentName:"li"},"static")," IP address for that host."),(0,a.kt)("li",{parentName:"ul"},"You need to open ports 6179, 6180, 8080, 3030 on the host")),(0,a.kt)("h1",{id:"1-install-binaries"},"1. Install binaries"),(0,a.kt)("p",null,"Export the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/bins")," directory to be in search path, and download the binaries with a script."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"export PATH=$PATH:~/bin && echo export PATH=\\$PATH:~/bin >> ~/.bashrc\n\ncurl -sL https://raw.githubusercontent.com/OLSF/libra/main/ol/util/install.sh | bash\n")),(0,a.kt)("h1",{id:"2-start-a-persistent-terminal-session"},"2. Start a persistent terminal session"),(0,a.kt)("p",null,"Recommended multiplexer is ",(0,a.kt)("inlineCode",{parentName:"p"},"tmux"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"> tmux\n\n# or `tmux a` to reattach to a previous session\n> tmux a\n")),(0,a.kt)("h1",{id:"3-make-keys"},"3. Make keys"),(0,a.kt)("h4",{id:"make-new-keys-and-address"},"Make new keys, and address:"),(0,a.kt)("p",null,"From within your ",(0,a.kt)("inlineCode",{parentName:"p"},"tmux")," instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"onboard keygen\n")),(0,a.kt)("h2",{id:"stop-write-this-info-down-on-pen-and-paper-now"},"STOP. WRITE THIS INFO DOWN ",(0,a.kt)("em",{parentName:"h2"},"ON PEN AND PAPER"),". NOW."),(0,a.kt)("h1",{id:"4-create-config-files"},"4. Create config files"),(0,a.kt)("p",null,"Preferably use a template from a url (usually on another node on the network). Something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"onboard val -u http://[their-ip-address]\n")),(0,a.kt)("p",null,"NOTE: Don't forget ",(0,a.kt)("inlineCode",{parentName:"p"},"http://")),(0,a.kt)("h1",{id:"5-wait"},"5. Wait"),(0,a.kt)("p",null,"Your ",(0,a.kt)("inlineCode",{parentName:"p"},"tower")," app will produce a proof which is needed to create an account. This will take 10-15 minutes."),(0,a.kt)("h1",{id:"6-start-0l-services"},"6. Start 0L services"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," subcommand will run ",(0,a.kt)("inlineCode",{parentName:"p"},"pilot")," app which continuously checks node and tower state and changes nodes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Restore from the latest epoch snapshot instead of syncing the entire chain\n> ol restore\n\n# start all 0L services and restore chain from archive\n\n> ol start\n\n# press <ctrl+b> then <d> to detach from tmux without stopping the app. Reattach with `tmux a`\n")),(0,a.kt)("h4",{id:"check-the-web-monitor"},"Check the web monitor"),(0,a.kt)("p",null,"Go to: ",(0,a.kt)("inlineCode",{parentName:"p"},"http://[your-ip-address]:3030")),(0,a.kt)("h5",{id:"troubleshooting-if-no-page-loads-here-you-may-not-have-port-3030-open-to-the-public"},"Troubleshooting: If no page loads here, you may not have port ",(0,a.kt)("inlineCode",{parentName:"h5"},"3030")," open to the public."),(0,a.kt)("h1",{id:"7-create-account-on-chain"},"7. Create account on chain"),(0,a.kt)("p",null,"Have someone (with GAS) submit the account creation on chain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"txs create-validator -u http://[your-ip-address]\n")),(0,a.kt)("p",null,"More details here: (create_account_on_chain.md)"))}u.isMDXComponent=!0}}]);